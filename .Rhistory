for (t in 1:ngens){
    fit_tmp = get_fit_one(env_states, fs)
    env_act[t] = fit_tmp$env_act #Store the env state
    sp_fit_o[t,] = fs[(env_act[t]+1), ]
    #No information
    #rho_noi[t+1, ] = ( sr*(1-gs_noi[c(which_env)])   + sp_fit * gs_noi[c(which_env)]  ) 
    gs_noi = runif(nspp)
    gnoi_fit[t,] = gs_noi 
    rho_noi[t, ] = ( sr*(1-gnoi_fit[t,])   + sp_fit_o[t,]  * gnoi_fit[t,] ) 
    N_noi[t+1,] = N_noi[t, ] * rho_noi[t, ] 
    N_noi[t+1,][N_noi[t+1,]<0] = 0
    #Optimal constant betting
    rho_o[t, ] = ( sr*(1-gs_o[(env_act[t]+1),] )   + sp_fit_o[t,] * gs_o[(env_act[t]+1),]  ) 
    No[t+1,] = No[t, ] * rho_o[t, ] 
    No[t+1,][No[t+1,]<0] = 0
    #With information, conditional germination rates
    #The environment that species sensed (i.e. the cue they got), based on G(C|E)
    sp_fit_tmp = matrix((0:(num_states-1)),num_states,nspp)
    for( s in 1:nspp){ 
        env_sensed[t,s] = sample(x=(0:(num_states-1)), size=1, prob =gce[ (env_act[t]+1),,s], replace=T)
        ec = env_sensed[t,s]
        sp_fit_tmp[,s][sp_fit_tmp[,s]!=ec] = -1 #Identify losers
        sp_fit_tmp[,s][sp_fit_tmp[,s]==ec] = fs[,s][sp_fit_tmp[,s]==ec] #Set winning state to its payout
    }
    sp_fit_i[t,] = sp_fit_tmp[sp_fit_tmp>=0]
    #This version is the most similar to the kelly betting example, but does not 
    #make a lot of ecological sense. In particular, it never makes sense to bet
    #everything on a really crappy year under conditions of sub-fair odds. 
    rho_i1[t, ] = ( sr*(1-gec[(env_act[t]+1) , , ][ (env_sensed[t,]+1) ] )   + 
                sp_fit_i[t,] * gec[(env_act[t]+1) , , ][ (env_sensed[t,]+1) ]  )
    # #This version uses the germination rate that matches the sensed environment
    rho_i2[t, ] = ( sr*(1-gs[(env_sensed[t,]+1)] )   + 
                sp_fit_i[t,] * gs[(env_sensed[t,]+1)] )
    # #This version uses the germination rate that matches the sensed environment
    # #and assumes that species are selective as to what conditions they germinate
    rho_i3[t, ] = ( sr*(1- g_in_e2[ matrix( c( (env_sensed[t,]+1), c(env_act[t,]+1,env_act[t,]+1),1:nspp ), 2, 3 ) ] )   + 
                sp_fit_i[t,] * g_in_e2[ matrix( c( (env_sensed[t,]+1), c(env_act[t,]+1,env_act[t,]+1),1:nspp ), 2, 3 ) ] )
    gt_e2[t, ] =  g_in_e2[ matrix( c( (env_sensed[t,]+1), c(env_act[t,]+1,env_act[t,]+1),1:nspp ), 2, 3 ) ]
    #This version uses the ideal (max) germination rate that matches the sensed environment
    rho_i4[t, ] = ( sr*(1-g_in_e[(env_sensed[t,]+1)] )   + 
                sp_fit_i[t,] * g_in_e[(env_sensed[t,]+1)] )
    Ni1[t+1,] = Ni1[t, ] * rho_i1[t, ] 
    Ni1[t+1,][Ni1[t+1,]<0] = 0
    Ni2[t+1,] = Ni2[t, ] * rho_i2[t, ] 
    Ni2[t+1,][Ni2[t+1,]<0] = 0
    Ni3[t+1,] = Ni3[t, ] * rho_i3[t, ] 
    Ni3[t+1,][Ni3[t+1,]<0] = 0
    Ni4[t+1,] = Ni4[t, ] * rho_i4[t, ] 
    Ni4[t+1,][Ni4[t+1,]<0] = 0
}
#Plot the population growth
nn=1:ngens
plot(log(No[,1]),t="l", ylim = c(0,300))
lines(log(N_noi[,1]), col="red")
lines(log(Ni1[,1]),col="blue")
lines(log(Ni2[,1]),col="orange")
lines(log(Ni3[,1]),col="green")
lines(log(Ni4[,1]),col="yellow")
#Theoretical prediction based on optimal germination/betting strategy (gs)
lines(log(2^(nn*sum(env_prob*log2(gs[,1]*fs[,1])))),col="red")
#Theoretical prediction when optimal germination matches actual probs
Wbp = log2(env_prob*fs[,1])
Wbp[!is.finite(Wbp)] = 0
lines(log(2^(nn*sum(env_prob*Wbp))),col="blue" )
#The theoretical population growth rate:
#log-Rate: 
lGr = colSums(matrix(env_prob,num_states,nspp)*log(gs*fs))
#Rate:
Gr = apply( (gs*fs)^matrix(env_prob,num_states,nspp),2,prod)
####The mutual information between the cue and the environment: 
env_freq = prop.table(table(env_act)) #Environment frequency
sE = shannon_D(env_freq) #Shannon entropy
#For species 1: 
c_and_e = prop.table(table( data.frame ( e =env_act, c = env_sensed[,1]) ))  #Joint prob between env and cue
sCgivenE = shannon_CE (c_and_e) #Conditional entropy H(C|E)
#Mutual information: 
mI = sE - sCgivenE 
#Divergences: 
breaks = dim(c_and_e)[1]
rho_i[ngens+1,] = rho_i[ngens,]
rho_noi[ngens+1,] = rho_noi[ngens,]
rho_i = (rho_i4)
r_noi = (rho_noi)
#Probability distribution of growth rates with info
b_use_i = seq(min(c(r_noi,rho_i),na.rm=T),max(c(r_noi,rho_i),na.rm=T), length.out=(breaks+1) )
rho_dist_i = hist(rho_i,breaks=b_use_i,plot = FALSE)
rho_i_p = rho_dist_i$counts/sum(rho_dist_i$counts)
rho_i_b = rho_dist_i$mids
#Average log growth rate:
rho_i_d = sum(rho_i_p*rho_i_b )
#Probability distribution of growth rates without info
#b_use_noi = seq(min(rho_noi,na.rm=T),max(rho_noi,na.rm=T), length.out=breaks)
rho_dist_noi = hist(r_noi,breaks=b_use_i,plot = FALSE)
rho_noi_p = rho_dist_noi$counts/sum(rho_dist_noi$counts)
rho_noi_b = rho_dist_noi$mids
#Average log growth rate:
rho_noi_d = sum(rho_noi_p*rho_noi_b )
#Get KL from philentropy:
#What is this? Why does this work? 
kl1 = philentropy::KL(rbind(rho_noi_p, rho_i_p), unit = "log") 
#These are the unconditional and conditional divergences from Box 1:
#c_and_r = prop.table(table( data.frame ( c = env_act[1:ngens,1], e = rho_i[1:ngens,1]  ) ))
c_and_r1 = prop.table(table( data.frame ( c = env_sensed[1:ngens,1], e = env_act[1:ngens,1]  ) ))
c_and_r = prop.table(table( data.frame ( c = gt_e2[1:ngens,1], e = env_act[1:ngens,1]  ) ))
mar_x = rowSums(c_and_r) 
mar_y = colSums(c_and_r) 
kl_u = philentropy::KL( rbind(mar_x,mar_y), unit="log" )
mar_x
mar_y
gec = get_cp(env_states, acc=c(1,1) )
#Make G(C|E) from G(E|C) to simulate population dynamics later:
gj = gec 
gce = gec
for(s in 1:nspp){
    #Joint probability distribution G(E,C) = G(C,E) = G(E|C) * G(C)
    gj[,,s] = gec[,,s]*matrix(env_states, num_states,num_states,byrow=T ) 
    ####For 0 MI, scramble to Cue: 
    #gj[,,s] = matrix(runif(num_states^2), num_states,num_states,byrow=T ) 
    #G(C|E) = G(C,E)/G(E)
    gce[,,s] = gj[,,s]/matrix(rowSums(gj[,,s]),num_states,num_states)
    gce[,,s][!is.finite(gce[,,s])] = 0
}
###########
#This is key somehow:
incr=0.01
H1 = seq(0.01,.99,incr)
a1=sr[1]*(1-matrix(H1,length(H1),num_states))+kronecker(H1,t(fs[,1]))
#a1=matrix(sr*(1-H1), length(sr), dim(fs)[1] )+matrix(H1*fs[,1], length(sr),dim(fs)[1],byrow=T)
a2 = array( matrix(1, num_states,num_states), dim = c(num_states,num_states,nspp) )
a2[,,1] = sr[1]*(1-gec[,,1])+  gec[,,1]*matrix(fs[,1], num_states, num_states )
a2[,,2] = sr[2]*(1-gec[,,2])+  gec[,,2]*matrix(fs[,2], num_states, num_states )
g_in_e = H1[apply(a1,2,which.max)]
# g_in_e = matrix(g_in_e,env)
g_in_e2 = a2 
g_in_e2[,,1] =gec[,,1] * matrix( apply(a2[,,1],2,max) >=1, num_states, num_states,byrow=T ) 
g_in_e2[,,2] =gec[,,2] * matrix( apply(a2[,,2],2,max) >=1, num_states, num_states,byrow=T ) 
#g_in_e = env_states*g_in_e/(sum(env_states*g_in_e)) 
###########
#=============================================================================
#Population dynamics
#=============================================================================  
gs = cbind(env_states,env_states)   
for (t in 1:ngens){
    fit_tmp = get_fit_one(env_states, fs)
    env_act[t] = fit_tmp$env_act #Store the env state
    sp_fit_o[t,] = fs[(env_act[t]+1), ]
    #No information
    #rho_noi[t+1, ] = ( sr*(1-gs_noi[c(which_env)])   + sp_fit * gs_noi[c(which_env)]  ) 
    gs_noi = runif(nspp)
    gnoi_fit[t,] = gs_noi 
    rho_noi[t, ] = ( sr*(1-gnoi_fit[t,])   + sp_fit_o[t,]  * gnoi_fit[t,] ) 
    N_noi[t+1,] = N_noi[t, ] * rho_noi[t, ] 
    N_noi[t+1,][N_noi[t+1,]<0] = 0
    #Optimal constant betting
    rho_o[t, ] = ( sr*(1-gs_o[(env_act[t]+1),] )   + sp_fit_o[t,] * gs_o[(env_act[t]+1),]  ) 
    No[t+1,] = No[t, ] * rho_o[t, ] 
    No[t+1,][No[t+1,]<0] = 0
    #With information, conditional germination rates
    #The environment that species sensed (i.e. the cue they got), based on G(C|E)
    sp_fit_tmp = matrix((0:(num_states-1)),num_states,nspp)
    for( s in 1:nspp){ 
        env_sensed[t,s] = sample(x=(0:(num_states-1)), size=1, prob =gce[ (env_act[t]+1),,s], replace=T)
        ec = env_sensed[t,s]
        sp_fit_tmp[,s][sp_fit_tmp[,s]!=ec] = -1 #Identify losers
        sp_fit_tmp[,s][sp_fit_tmp[,s]==ec] = fs[,s][sp_fit_tmp[,s]==ec] #Set winning state to its payout
    }
    sp_fit_i[t,] = sp_fit_tmp[sp_fit_tmp>=0]
    #This version is the most similar to the kelly betting example, but does not 
    #make a lot of ecological sense. In particular, it never makes sense to bet
    #everything on a really crappy year under conditions of sub-fair odds. 
    rho_i1[t, ] = ( sr*(1-gec[(env_act[t]+1) , , ][ (env_sensed[t,]+1) ] )   + 
                sp_fit_i[t,] * gec[(env_act[t]+1) , , ][ (env_sensed[t,]+1) ]  )
    # #This version uses the germination rate that matches the sensed environment
    rho_i2[t, ] = ( sr*(1-gs[(env_sensed[t,]+1)] )   + 
                sp_fit_i[t,] * gs[(env_sensed[t,]+1)] )
    # #This version uses the germination rate that matches the sensed environment
    # #and assumes that species are selective as to what conditions they germinate
    rho_i3[t, ] = ( sr*(1- g_in_e2[ matrix( c( (env_sensed[t,]+1), c(env_act[t,]+1,env_act[t,]+1),1:nspp ), 2, 3 ) ] )   + 
                sp_fit_i[t,] * g_in_e2[ matrix( c( (env_sensed[t,]+1), c(env_act[t,]+1,env_act[t,]+1),1:nspp ), 2, 3 ) ] )
    gt_e2[t, ] =  g_in_e2[ matrix( c( (env_sensed[t,]+1), c(env_act[t,]+1,env_act[t,]+1),1:nspp ), 2, 3 ) ]
    #This version uses the ideal (max) germination rate that matches the sensed environment
    rho_i4[t, ] = ( sr*(1-g_in_e[(env_sensed[t,]+1)] )   + 
                sp_fit_i[t,] * g_in_e[(env_sensed[t,]+1)] )
    Ni1[t+1,] = Ni1[t, ] * rho_i1[t, ] 
    Ni1[t+1,][Ni1[t+1,]<0] = 0
    Ni2[t+1,] = Ni2[t, ] * rho_i2[t, ] 
    Ni2[t+1,][Ni2[t+1,]<0] = 0
    Ni3[t+1,] = Ni3[t, ] * rho_i3[t, ] 
    Ni3[t+1,][Ni3[t+1,]<0] = 0
    Ni4[t+1,] = Ni4[t, ] * rho_i4[t, ] 
    Ni4[t+1,][Ni4[t+1,]<0] = 0
}
#Plot the population growth
nn=1:ngens
plot(log(No[,1]),t="l", ylim = c(0,300))
lines(log(N_noi[,1]), col="red")
lines(log(Ni1[,1]),col="blue")
lines(log(Ni2[,1]),col="orange")
lines(log(Ni3[,1]),col="green")
lines(log(Ni4[,1]),col="yellow")
#Theoretical prediction based on optimal germination/betting strategy (gs)
lines(log(2^(nn*sum(env_prob*log2(gs[,1]*fs[,1])))),col="red")
#Theoretical prediction when optimal germination matches actual probs
Wbp = log2(env_prob*fs[,1])
Wbp[!is.finite(Wbp)] = 0
lines(log(2^(nn*sum(env_prob*Wbp))),col="blue" )
#The theoretical population growth rate:
#log-Rate: 
lGr = colSums(matrix(env_prob,num_states,nspp)*log(gs*fs))
#Rate:
Gr = apply( (gs*fs)^matrix(env_prob,num_states,nspp),2,prod)
####The mutual information between the cue and the environment: 
env_freq = prop.table(table(env_act)) #Environment frequency
sE = shannon_D(env_freq) #Shannon entropy
#For species 1: 
c_and_e = prop.table(table( data.frame ( e =env_act, c = env_sensed[,1]) ))  #Joint prob between env and cue
sCgivenE = shannon_CE (c_and_e) #Conditional entropy H(C|E)
#Mutual information: 
mI = sE - sCgivenE 
#Divergences: 
breaks = dim(c_and_e)[1]
rho_i[ngens+1,] = rho_i[ngens,]
rho_noi[ngens+1,] = rho_noi[ngens,]
rho_i = (rho_i4)
r_noi = (rho_noi)
#Probability distribution of growth rates with info
b_use_i = seq(min(c(r_noi,rho_i),na.rm=T),max(c(r_noi,rho_i),na.rm=T), length.out=(breaks+1) )
rho_dist_i = hist(rho_i,breaks=b_use_i,plot = FALSE)
rho_i_p = rho_dist_i$counts/sum(rho_dist_i$counts)
rho_i_b = rho_dist_i$mids
#Average log growth rate:
rho_i_d = sum(rho_i_p*rho_i_b )
#Probability distribution of growth rates without info
#b_use_noi = seq(min(rho_noi,na.rm=T),max(rho_noi,na.rm=T), length.out=breaks)
rho_dist_noi = hist(r_noi,breaks=b_use_i,plot = FALSE)
rho_noi_p = rho_dist_noi$counts/sum(rho_dist_noi$counts)
rho_noi_b = rho_dist_noi$mids
#Average log growth rate:
rho_noi_d = sum(rho_noi_p*rho_noi_b )
#Get KL from philentropy:
#What is this? Why does this work? 
kl1 = philentropy::KL(rbind(rho_noi_p, rho_i_p), unit = "log") 
#These are the unconditional and conditional divergences from Box 1:
#c_and_r = prop.table(table( data.frame ( c = env_act[1:ngens,1], e = rho_i[1:ngens,1]  ) ))
c_and_r1 = prop.table(table( data.frame ( c = env_sensed[1:ngens,1], e = env_act[1:ngens,1]  ) ))
c_and_r = prop.table(table( data.frame ( c = gt_e2[1:ngens,1], e = env_act[1:ngens,1]  ) ))
mar_x = rowSums(c_and_r) 
mar_y = colSums(c_and_r) 
kl_u = philentropy::KL( rbind(mar_x,mar_y), unit="log" )
mar_x
unique(g_in_e2[,,1])
(g_in_e2[,,1])
gec[,,1]
 matrix( apply(a2[,,1],2,max) >=1, num_states, num_states,byrow=T )
a2[,,1]
kl1
rho_i_d
rho_noi_d
rho_i_d - rho_noi_d
c_and_e
matrix( mar_y, length(mar_x), length(mar_x))
#KL Divergence of environment, sensed environment
mar_x = rowSums(c_and_e) 
mar_y = colSums(c_and_e) 
kl_ec = philentropy::KL( rbind(mar_x,mar_y), unit="log" )
matrix( mar_y, length(mar_x), length(mar_x))
c_ce = c_and_e/matrix( mar_y, length(mar_x), length(mar_x),byrow=T)
c_ce
?philentropy::KL
k1_ec
kl_ec
kl_ec = philentropy::KL( rbind(mar_e,mar_c), unit="log" )
mar_e = rowSums(c_and_e) 
mar_c = colSums(c_and_e)
mar_e = rowSums(c_and_e) 
mar_c = colSums(c_and_e)
c_ce
rho_i_d
breaks = dim(c_and_e)[1]
rho_i[ngens+1,] = rho_i[ngens,]
rho_noi[ngens+1,] = rho_noi[ngens,]
rho_i = log(rho_i4)
r_noi = log(rho_noi)
#Probability distribution of growth rates with info
b_use_i = seq(min(c(r_noi,rho_i),na.rm=T),max(c(r_noi,rho_i),na.rm=T), length.out=(breaks+1) )
rho_dist_i = hist(rho_i,breaks=b_use_i,plot = FALSE)
rho_i_p = rho_dist_i$counts/sum(rho_dist_i$counts)
rho_i_b = rho_dist_i$mids
#Average log growth rate:
rho_i_d = sum(rho_i_p*rho_i_b )
#Probability distribution of growth rates without info
#b_use_noi = seq(min(rho_noi,na.rm=T),max(rho_noi,na.rm=T), length.out=breaks)
rho_dist_noi = hist(r_noi,breaks=b_use_i,plot = FALSE)
rho_noi_p = rho_dist_noi$counts/sum(rho_dist_noi$counts)
rho_noi_b = rho_dist_noi$mids
#Average log growth rate:
rho_noi_d = sum(rho_noi_p*rho_noi_b )
kl1 = philentropy::KL(rbind(rho_noi_p, rho_i_p), unit = "log")
kl1
rho_i_d-rho_noi_d
breaks = dim(c_and_e)[1]
rho_i[ngens+1,] = rho_i[ngens,]
rho_noi[ngens+1,] = rho_noi[ngens,]
rho_i = (rho_i4)
r_noi = (rho_noi)
b_use_i = seq(min(c(r_noi,rho_i),na.rm=T),max(c(r_noi,rho_i),na.rm=T), length.out=(breaks+1) )
rho_dist_i = hist(rho_i,breaks=b_use_i,plot = FALSE)
rho_i_p = rho_dist_i$counts/sum(rho_dist_i$counts)
rho_i_b = rho_dist_i$mids
#Average log growth rate:
rho_i_d = sum(rho_i_p*rho_i_b )
#Probability distribution of growth rates without info
#b_use_noi = seq(min(rho_noi,na.rm=T),max(rho_noi,na.rm=T), length.out=breaks)
rho_dist_noi = hist(r_noi,breaks=b_use_i,plot = FALSE)
rho_noi_p = rho_dist_noi$counts/sum(rho_dist_noi$counts)
rho_noi_b = rho_dist_noi$mids
#Average log growth rate:
rho_noi_d = sum(rho_noi_p*rho_noi_b )
length(rho_i_d)
rho_i_d
length(rho_i_p)
length(unique(rho_i_p))
(unique(rho_i_p))
length(unique(rho_i))
rho_i
r_and_c = prop.table(table( data.frame ( e =rho_i, c = env_sensed[,1]) ))  #Joint prob between env and cue
dim(r_and_c)
r_and_c = prop.table(table( data.frame ( e =rho_i[,,1], c = env_sensed[,1]) ))  #Joint prob between env and cue
r_and_c = prop.table(table( data.frame ( e =rho_i[,1], c = env_sensed[,1]) ))  #Joint prob between env and cue
rand_c
r_and_c
rho_i[1,]
rho_i[ngens,]
rho_i[ngens+1,]
c_and_e = prop.table(table( data.frame ( e =env_act[1:ngens,1], c = env_sensed[1:ngens,1]) ))  #Joint prob between env and cue
dim(c_and_e)
r_and_c = prop.table(table( data.frame ( e =rho_i[1:ngens,1], c = env_sensed[1:ngens,1]) ))  #Joint prob between env and cue
dim(r_and_c)
r_and_C
r_and_c
mar_r = rowSums(r_and_c) 
mar_cr = colSums(r_and_c)
r_ce = r_and_c/matrix(mar_cr, length(mar_r), length(mar_cr),byrow=T)
mar_cr
mar_c
c_and_e
    k1_egc_tmp = philentropy::KL( c_ce[,s], r_ce[,s] )
    k1_egc_tmp = philentropy::KL( rbind(c_ce[,s], r_ce[,s]), unit="log" )
kl_egc_tmp
k1_egc_tmp
rbind(c_ce[,s], r_ce[,s])
r_and_c
e_and_C
e_and_c
c_and_e
r_and_c = prop.table(table( data.frame ( r = rho_i[1:ngens,1], c = env_sensed[1:ngens,1]) ))  #Joint prob between env and cue
r_and_c = prop.table(table( data.frame ( r = rho_i[1:ngens,1], 
    c = env_sensed[1:ngens,1],rownames = env_act[1:ngens,1] ) ))
r_and_C
r_and_c
dim(r_and_c)
a1=data.frame ( r = rho_i[1:ngens,1], 
c = env_sensed[1:ngens,1],rownames = env_act[1:ngens,1] )
head(a1)
?data.frame
r_and_c = prop.table(table( data.frame ( r = rho_i[1:ngens,1], 
    c = env_sensed[1:ngens,1],row.names = env_act[1:ngens,1] ) ))
a1=data.frame ( r = rho_i[1:ngens,1], 
c = env_sensed[1:ngens,1],row.names = env_act[1:ngens,1] )
?table
r_and_c = prop.table(table( data.frame ( r = rho_i[1:ngens,1], 
c = env_sensed[1:ngens,1],row.names = env_act[1:ngens,1] ) ))  #Joint prob between env and cue 
r_and_e = prop.table(table( data.frame ( r = rho_i[1:ngens,1], 
    c = env_act[1:ngens,1]) ))  #Joint prob between env and cue
r_and_r
r_and_e
r_and_c
r_and_c = prop.table(table( data.frame ( r = rho_i[1:ngens,1], 
    c = env_sensed[1:ngens,1]) ))  #Joint prob between env and cue 
r_and_e = prop.table(table( data.frame ( r = rho_i[1:ngens,1], 
    c = env_act[1:ngens,1]) ))  #Joint prob between env and cue
r_and_e
r_and_c
r_and_c = prop.table(table( data.frame ( r = rho_i[1:ngens,1], 
    c = env_sensed[1:ngens,1]) ))  #Joint prob between env and cue 
r_and_e = prop.table(table( data.frame ( r = rho_i[1:ngens,1], 
    e = env_act[1:ngens,1]) ))  #Joint prob between env and cue
table( data.frame ( r = rho_i[1:ngens,1], 
    c = env_sensed[1:ngens,1]) )
r_and_c = prop.table(table( data.frame ( r = rho_i[1:ngens,1], 
    c = as.factor(env_sensed[1:ngens,1])) ))
r_and_c
str(r_and_c)
r_and_c = prop.table(table( data.frame ( r = rho_i[1:ngens,1], 
    c = env_sensed[1:ngens,1]) ))  #Joint prob between env and cue 
r_and_e = prop.table(table( data.frame ( r = rho_i[1:ngens,1], 
    e = env_act[1:ngens,1]) ))  #Joint prob between env and cue
rownames(r_and_e)
a1= data.frame ( r = rho_i[1:ngens,1], 
c = env_sensed[1:ngens,1])
head(a1)
?order
a2= order(a1,2)
?order
a2= a1[order(a1[,2]),]
head(a2)
unique(a2)
rc_df = data.frame ( r = rho_i[1:ngens,1], 
    c = env_sensed[1:ngens,1])
r_and_c = prop.table(table( rc_df ))  #Joint prob between env and cue 
#We want the rows of r_and_c to match the order of the environments/cues. 
#This is essential for comparing the distributions via KLD. This can be
#achieved by sorting rc_df along environment values so that the ordering
#of rho values now matches the ordering of environment values: 
order_key = unique( rc_df[order(rc_df[,2] ), ] )
order_key
a2 = r_and_c[order_key[,1],]
a2
rownames(r_and_c)
colnames(r_and_c)
rownames(r_and_c)
as.character(order_key[,1])
rownames(r_and_c) %in% as.character(order_key[,1])
a2 = r_and_c[match(as.character(order_key[,1]]), rownames(r_and_c)]
a2 = r_and_c[match(as.character(order_key[,1]]), rownames(r_and_c))]
a2 = r_and_c[match(as.character(order_key[,1]), rownames(r_and_c)) ]
a2
a2 = r_and_c[match(as.character(order_key[,1]), rownames(r_and_c)), ]
a2
r_and_c = r_and_c[match(as.character(order_key[,1]), rownames(r_and_c)), ]
r_and_c
mar_r = rowSums(r_and_c) 
mar_cr = colSums(r_and_c) 
r_ce = r_and_c/matrix(mar_cr, length(mar_r), length(mar_cr),byrow=T)
r_ce
    kl_egc_tmp = philentropy::KL( rbind(c_ce[,s], r_ce[,s]), unit="log" )
kl_egc_tmp
kl_egc = 0 
for( s in 1:length(mar_c) ){  
    #Inner sum is across all entries (rows) in a specific column of the conditional 
    #probability table
    kl_egc_tmp = philentropy::KL( rbind(c_ce[,s], r_ce[,s]), unit="log" )
}
#Conditional KL Divergence between environment and rho
kl_egc = 0 
for( s in 1:length(mar_c) ){  
    #Inner sum is across all entries (rows) in a specific column of the conditional 
    #probability table
    kl_egc_tmp = philentropy::KL( rbind(c_ce[,s], r_ce[,s]), unit="log" )
    kl_egc = kl_egc+kl_egc_tmp
}
kl_egc
mar_r
kl1 = philentropy::KL( rbind(mar_e, mar_r), unit="log" )
kl1
kl1 = philentropy::KL( rbind(mar_r, mar_e), unit="log" )
kl1
mar_e
mar_r
mar_cr
mar_e
mar_c
rnoi_and_e = prop.table(table(  data.frame ( r = r_noi[1:ngens,1], 
    e = env_act[1:ngens,1]) ))
rnoi_and_e
dim(rnoi_and_e)
mar_noir = rowSums(rnoi_and_e) 
mar_noie = colSums(rnoi_and_e)
mar_noir
mar_noe
mar_noie
hist( r_noi[1:ngens,1])
a1 = hist( r_noi[1:ngens,1])
a1
plot(a1$mids, a1$density)
plot(a1$mids, a1$density,t="l")
lines(unique(rc_df[1,]), mar_r) 
unique(rc_df[1,])
lines(unique(rc_df[,1]), mar_r) 
unique(rc_df[,1])
plot(a1$mids, a1$density,t="l")
order_key
lines(order_key[,1], mar_r) 
mar_r
plot(a1$mids, a1$density,t="l")
lines(mar_r) 
plot(a1$mids, a1$density,t="l")
unique(rc_df) 
unique(rc_df[,1]) 
sort(unique(rc_df[,1]) )
lines( sort(unique(rc_df[,1]) ), prop.table(table(rc_df[,1])))
mar_e
mar_r
plot(mar_e)
plot(mar_r, col="red")
plot(mar_e)
points(mar_r, col="red")
points(mar_noir,col="blue")
c_rnoi = rnoi_and_e/matrix(mar_noie, length(mar_noir), length(mar_noie),byrow=T)
c_rnoi[1:10,1:10]
dim(c_rnoi)
c_rnoi[1:10,]
rnoi_and_e[1:10,]
dim(rnoi_and_e)
plot(as.numeric(colnames(rnoi_and_e)))
plot(as.numeric(rownames(rnoi_and_e)))
plot(as.numeric(rownames(rnoi_and_e)), mar_noir)
plot(as.numeric(rownames(rnoi_and_e)), mar_noir)
plot(as.numeric(rownames(r_and_c)), mar_r)
plot(as.numeric(rownames(r_and_c)), mar_r,xlim=c(0,4))
points(as.numeric(rownames(rnoi_and_e)), mar_noir)
q()
